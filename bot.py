import logging
import random
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º RED_DISTRIBUTION –∏ POSITIONS_MAP –∏–∑ distributions.py
from distributions import RED_DISTRIBUTION, POSITIONS_MAP, API_TOKEN

logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ö–∞—Ä—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤ –∏ —á–∏—Å–ª–∞ "–∫—Ä–∞—Å–Ω—ã—Ö"
red_distribution = RED_DISTRIBUTION

# –ö–ª–∞—Å—Å GameState
class GameState:
    def __init__(self):
        self.moderator = None
        self.players = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        self.num_red = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∞—Å–Ω—ã—Ö
        self.selected_red = set()  # –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫—Ä–∞—Å–Ω—ã–µ –∏–≥—Ä–æ–∫–∏
        self.demon = None  # ID –∏–≥—Ä–æ–∫–∞-–¥–µ–º–æ–Ω–∞
    
    def set_players_count(self, count):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤."""
        self.players = {i: {'role': 'none', 'alive': True} for i in range(1, count + 1)}
        self.selected_red = set()
        self.demon = None  # –°–±—Ä–æ—Å –¥–µ–º–æ–Ω–∞ –ø—Ä–∏ –Ω–æ–≤–æ–π –∏–≥—Ä–µ
    
    def set_role(self, player_id, role):
        """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫—É."""
        if player_id in self.players:
            self.players[player_id]['role'] = role
    
    def get_game_state(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã."""
        return {
            'players': self.players,
            'demon': self.demon
        }

game_state = GameState()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_game(message: Message):
    game_state.moderator = message.from_user.id

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤
    buttons = [KeyboardButton(text=str(i)) for i in sorted(red_distribution.keys(), reverse=True)]
    keyboard = ReplyKeyboardMarkup(keyboard=[buttons], resize_keyboard=True)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤
@dp.message(lambda message: message.text.isdigit() and int(message.text) in red_distribution)
async def choose_players_count(message: Message):
    num_players = int(message.text)
    game_state.set_players_count(num_players)
    game_state.num_red = red_distribution[num_players]

    await display_tokens(message, num_players)

    # –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª–∏
    await message.answer(f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ, –∫—Ç–æ –±—É–¥–µ—Ç '–∫—Ä–∞—Å–Ω—ã–º'. –ö—Ä–∞—Å–Ω—ã—Ö –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å: {game_state.num_red}.")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–º–µ—Ä–∞–º–∏ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ "–∫—Ä–∞—Å–Ω—ã—Ö"
    await send_red_selection_keyboard(message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∂–µ—Ç–æ–Ω–æ–≤ –≤ –∫—Ä—É–≥–µ
async def display_tokens(message: Message, num_players: int):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫—Ä—É–≥ –∂–µ—Ç–æ–Ω–æ–≤ —Å —Ü–≤–µ—Ç–æ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫–∞."""
    def get_player_emoji(player_id):
        role = game_state.players[player_id]['role']
        if role == 'demon':
            return "‚ö´"  # –ß–µ—Ä–Ω—ã–π –∂–µ—Ç–æ–Ω –¥–ª—è –¥–µ–º–æ–Ω–∞
        elif role == 'red':
            return "üî¥"
        elif role == 'blue':
            return "üîµ"
        else:
            return "‚ö™"  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –µ—Å–ª–∏ —Ä–æ–ª—å –µ—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞

    positions = POSITIONS_MAP.get(num_players)

    if not positions:
        # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –º–µ–Ω—å—à–µ –∏–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        token_display = "```\n–ò–≥—Ä–æ–∫–∏:\n" + " ".join([
            f"{get_player_emoji(pid)} {pid}" for pid in range(1, num_players + 1)
        ]) + "\n```"
        await message.answer(token_display, parse_mode='Markdown')
        return

    lines = []

    # –°—Ç—Ä–æ–∏–º —Å—Ç—Ä–æ–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–π
    for row in positions:
        line = ""
        for pid in row:
            if pid is None:
                line += "     "  # –ü—Ä–æ–±–µ–ª—ã –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
            else:
                emoji = get_player_emoji(pid)
                line += f"{emoji} {pid}   "
        lines.append(line.rstrip())  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏

    token_display = "```\n" + "\n".join(lines) + "\n```"
    await message.answer(token_display, parse_mode='Markdown')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –Ω–æ–º–µ—Ä–∞–º–∏ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ "–∫—Ä–∞—Å–Ω—ã—Ö"
async def send_red_selection_keyboard(message: Message):
    buttons = []
    for player_id in sorted(game_state.players.keys()):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –∏–≥—Ä–æ–∫
        if game_state.players[player_id]['role'] == 'red' or game_state.players[player_id]['role'] == 'demon':
            button_text = f"‚úÖ {player_id}"
            callback_data = f"deselect_red:{player_id}"
        else:
            button_text = f"{player_id}"
            callback_data = f"select_red:{player_id}"
        
        buttons.append(InlineKeyboardButton(text=button_text, callback_data=callback_data))
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 5
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            buttons[i:i + 5] for i in range(0, len(buttons), 5)
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç '–∫—Ä–∞—Å–Ω—ã–º–∏':", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫–æ–≤ —á–µ—Ä–µ–∑ callback (–∫—Ä–∞—Å–Ω—ã–µ)
@dp.callback_query(lambda c: c.data and c.data.startswith("select_red:"))
async def assign_role(callback: CallbackQuery):
    _, player_id_str = callback.data.split(":")
    player_id = int(player_id_str)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω —ç—Ç–æ—Ç –∏–≥—Ä–æ–∫
    if game_state.players[player_id]['role'] != 'none':
        await callback.answer("–≠—Ç–æ—Ç –∏–≥—Ä–æ–∫ —É–∂–µ –≤—ã–±—Ä–∞–Ω.", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–æ—Å—å –ª–∏ –µ—â–µ –≤—ã–±–∏—Ä–∞—Ç—å "–∫—Ä–∞—Å–Ω—ã—Ö"
    if len(game_state.selected_red) < game_state.num_red:
        game_state.set_role(player_id, 'red')
        game_state.selected_red.add(player_id)
        await callback.answer(f"–ò–≥—Ä–æ–∫ {player_id} —Å—Ç–∞–ª '–∫—Ä–∞—Å–Ω—ã–º'.")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∂–µ—Ç–æ–Ω–æ–≤, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await display_tokens(callback.message, len(game_state.players))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∫—Ä–∞—Å–Ω—ã—Ö
        await send_red_selection_keyboard(callback.message)
        
        # –ï—Å–ª–∏ –≤—Å–µ "–∫—Ä–∞—Å–Ω—ã–µ" –≤—ã–±—Ä–∞–Ω—ã, –Ω–∞—á–∏–Ω–∞–µ–º –≤—ã–±–æ—Ä –¥–µ–º–æ–Ω–∞ –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è "—Å–∏–Ω–∏—Ö"
        if len(game_state.selected_red) == game_state.num_red:
            # –£–±–∏—Ä–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ '—Å–∏–Ω–∏—Ö' –∏–∑ —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞
            # assign_remaining_roles()  # –£–¥–∞–ª–µ–Ω–æ
            # await callback.message.answer(
            #     "–í—Å–µ –∫—Ä–∞—Å–Ω—ã–µ –≤—ã–±—Ä–∞–Ω—ã. –û—Å—Ç–∞–ª—å–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã '—Å–∏–Ω–∏–º–∏'."
            # )
            # await send_game_state(callback.message)
            
            # –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–±–æ—Ä –¥–µ–º–æ–Ω–∞
            await callback.message.answer(
                "–í—Å–µ –∫—Ä–∞—Å–Ω—ã–µ –≤—ã–±—Ä–∞–Ω—ã. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ, –∫—Ç–æ –∏–∑ '–∫—Ä–∞—Å–Ω—ã—Ö' –±—É–¥–µ—Ç –¥–µ–º–æ–Ω–æ–º.",
                reply_markup=await create_demon_selection_keyboard()
            )
    else:
        # –ï—Å–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω–æ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ "–∫—Ä–∞—Å–Ω—ã—Ö"
        await callback.answer("–í—Å–µ –∫—Ä–∞—Å–Ω—ã–µ —É–∂–µ –≤—ã–±—Ä–∞–Ω—ã.", show_alert=True)

def assign_remaining_roles():
    """–ù–∞–∑–Ω–∞—á–∞–µ—Ç –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∏–≥—Ä–æ–∫–æ–≤ '—Å–∏–Ω–∏–º–∏'."""
    for pid, player in game_state.players.items():
        if player['role'] == 'none':
            game_state.set_role(pid, 'blue')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –¥–µ–º–æ–Ω–∞
async def create_demon_selection_keyboard():
    buttons = []
    for player_id in sorted(game_state.selected_red):
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫—Ä–∞—Å–Ω—ã—Ö
        button_text = f"–ò–≥—Ä–æ–∫ {player_id}"
        callback_data = f"select_demon:{player_id}"
        buttons.append(InlineKeyboardButton(text=button_text, callback_data=callback_data))
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 5
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            buttons[i:i + 5] for i in range(0, len(buttons), 5)
        ]
    )
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–µ–º–æ–Ω–∞
@dp.callback_query(lambda c: c.data and c.data.startswith("select_demon:"))
async def select_demon(callback: CallbackQuery):
    _, player_id_str = callback.data.split(":")
    player_id = int(player_id_str)
    
    if player_id not in game_state.selected_red:
        await callback.answer("–≠—Ç–æ—Ç –∏–≥—Ä–æ–∫ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è '–∫—Ä–∞—Å–Ω—ã–º'.", show_alert=True)
        return
    
    if game_state.demon is not None:
        await callback.answer("–î–µ–º–æ–Ω —É–∂–µ –≤—ã–±—Ä–∞–Ω.", show_alert=True)
        return
    
    game_state.demon = player_id
    game_state.set_role(player_id, 'demon')
    
    await callback.answer(f"–ò–≥—Ä–æ–∫ {player_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –¥–µ–º–æ–Ω–æ–º.")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∂–µ—Ç–æ–Ω–æ–≤
    await display_tokens(callback.message, len(game_state.players))
    
    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –¥–µ–º–æ–Ω–∞
    await callback.message.edit_reply_markup(reply_markup=None)
    
    # –ù–∞–∑–Ω–∞—á–∞–µ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∏–≥—Ä–æ–∫–æ–≤ '—Å–∏–Ω–∏–º–∏'
    assign_remaining_roles()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ '—Å–∏–Ω–∏—Ö'
    await callback.message.answer(
        "–í—Å–µ –∫—Ä–∞—Å–Ω—ã–µ –≤—ã–±—Ä–∞–Ω—ã. –û—Å—Ç–∞–ª—å–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã '—Å–∏–Ω–∏–º–∏'."
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    await send_game_state(callback.message)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫–∞–º
    await send_roles_to_players()
    
    await callback.message.answer("–î–µ–º–æ–Ω –≤—ã–±—Ä–∞–Ω. –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–æ–ª–µ–π –∏–≥—Ä–æ–∫–∞–º
async def send_roles_to_players():
    for player_id, info in game_state.players.items():
        try:
            user = await bot.get_chat(player_id)
            role = info['role']
            role_display = "–î–µ–º–æ–Ω" if role == 'demon' else role.capitalize()
            await bot.send_message(
                chat_id=user.id,
                text=f"–í–∞—à–∞ —Ä–æ–ª—å: {role_display}"
            )
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–æ–ª—å –∏–≥—Ä–æ–∫—É {player_id}: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
async def send_game_state(message: Message):
    state = game_state.get_game_state()
    game_info = "\n".join([
        f"–ò–≥—Ä–æ–∫ {pid}: {'–î–µ–º–æ–Ω' if info['role'] == 'demon' else info['role'].capitalize()} (–ñ–∏–≤: {info['alive']})" 
        for pid, info in sorted(state['players'].items())
    ])
    token_display = "```\n" + game_info + "\n```"
    await message.answer(token_display, parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /role
@dp.message(Command("role"))
async def show_role(message: Message):
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ player_id ‚Äî —ç—Ç–æ Telegram user ID
    player_id = message.from_user.id
    
    # –ù–∞–π–¥–µ–º player_id –ø–æ Telegram user ID (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –æ–Ω–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç)
    if player_id in game_state.players:
        player_role = game_state.players[player_id]['role']
        role_display = "–î–µ–º–æ–Ω" if player_role == 'demon' else player_role.capitalize()
        await message.answer(f"–í–∞—à–∞ —Ä–æ–ª—å: {role_display}")
    else:
        await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —á–∞—Å—Ç—å—é –∏–≥—Ä—ã.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /kill
@dp.message(Command("kill"))
async def kill_player(message: Message):
    if message.from_user.id != game_state.moderator:
        await message.answer("–¢–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∫–∞–∑–Ω–∏—Ç—å.")
        return

    try:
        player_id = int(message.text.split()[1])  # –ü–æ–ª—É—á–∞–µ–º ID –∏–≥—Ä–æ–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        if player_id in game_state.players and game_state.players[player_id]['alive']:
            game_state.players[player_id]['alive'] = False
            await message.answer(f"–ò–≥—Ä–æ–∫ {player_id} –±—ã–ª –∫–∞–∑–Ω–µ–Ω.")
            await send_game_state(message)
        else:
            await message.answer("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∫–∞–∑–Ω–∏—Ç—å —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞.")
    except (IndexError, ValueError):
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /kill <player_id>")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())
